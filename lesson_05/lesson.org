* Exercises
 - Rewrite the following lambdas using & (E.g. "fn x -> x * 2 end" becomes "&(&1 * 2)")
 - fn x, y -> x * 3 + y * 2 end
 - fn x, y, z -> x + y + z end

* Modules
  #+BEGIN_SRC elixir
    defmodule Example do
      def add_one(x) do
        x + 1
      end
    end
  #+END_SRC
    
  Save this in a file named "example.ex" and run it with `iex example.ex`. To call the function use `Example.add_one(3)`. Notice that there isn't a dot before the opening parenthesis. 

  When you change the function definition, you can recompile it with "recompile" in "iex".

  To use the function in `Enum.map`, you can do it in the following way:
  #+BEGIN_SRC elixir
    Enum.map([1,2,3], &Example.add_one/1)
  #+END_SRC
   
  The "/1" part specifies, that we should use the function definition with 1 argument (there could be other definitions of the same function, with different arity).

  You can also define functions on line like this:
  #+BEGIN_SRC elixir
    def add_one(x), do: x + 1
  #+END_SRC

* Exercises 
  - Create the following functions in the same module:
    1. add_two/1
    2. subtract_three/1
    3. quadruple/1
* Pattern matching a list
  #+BEGIN_SRC elixir
    [head | tail] = [1, 2, 3]
  #+END_SRC

   Those are equivalent:
   #+BEGIN_SRC elixir
     [1 | [2 | [3 | []]]] == [1, 2, 3]
   #+END_SRC

* Pattern matching in function definitions
  #+BEGIN_SRC elixir
    defmodule Factorial do
      def calculate(0), do: 1
      def calculate(n), do: n * calculate(n - 1)
    end
  #+END_SRC
  From "Programming Elixir": /This pattern of design and coding is very common in Elixir (and almost all functional languages). First look for the simplest possible case, one that has a definite answer. This will be the anchor. Then look for a recursive solution that will end up calling the anchor case./

** Exercises
   Can you guess what this function does:

     #+BEGIN_SRC elixir
       def guess?([]), do: []
       def guess?([head | tail]), do: [head + 1 | guess?(tail)]
     #+END_SRC

   Would this work, in your opinion?

     #+BEGIN_SRC elixir
    defmodule Factorial do
      def calculate(n), do: n * calculate(n - 1)
      def calculate(0), do: 1
    end
     #+END_SRC

     - Write a recursive definition, that calculates the sum of list of integers. E.g. if you pass it [1, 2, 3, 4], it should return 10
     - Write a recursive definition of "length/1" (the function that calculates the length of a list)
* Homework
     - Write a recursive function, that calculates the sum of all even items in a list 
(to compute the remainder of an integer division, you can use the function rem/2)
     - Write a recursive function, that takes a list of strings, and return the uppercase 
version of all the strings, that start with "a" (case-insensitive)
